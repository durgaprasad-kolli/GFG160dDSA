class Solution:
    def uniquePaths(self, grid):
        n = len(grid)
        m = len(grid[0])
        
        # If starting or ending cell is blocked, return 0
        if grid[0][0] == 1 or grid[n-1][m-1] == 1:
            return 0

        # Initialize a DP table
        dp = [[0 for _ in range(m)] for _ in range(n)]

        # Starting cell
        dp[0][0] = 1

        # Fill the first row
        for j in range(1, m):
            if grid[0][j] == 0:
                dp[0][j] = dp[0][j-1]

        # Fill the first column
        for i in range(1, n):
            if grid[i][0] == 0:
                dp[i][0] = dp[i-1][0]

        # Fill the rest of the grid
        for i in range(1, n):
            for j in range(1, m):
                if grid[i][j] == 0:
                    dp[i][j] = dp[i-1][j] + dp[i][j-1]

        return dp[n-1][m-1]
